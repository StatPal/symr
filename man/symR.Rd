% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{symR}
\alias{symR}
\title{Synthetic Magnetic Resonance (symR)}
\usage{
symR(
  W = NULL,
  method = c("LS", "Least Square", "ML", "Maximum Likelihood", "OSL-EM",
    "One Step Late EM", "AECM", "EM"),
  dimen,
  TE_train,
  TR_train,
  sigma_train,
  train,
  train_scale,
  TE_scale,
  TR_scale,
  black_list,
  maxiter_LS = 50L,
  maxiter = 50L,
  abs_diff = 0.1,
  rel_diff = 1e-05,
  verbose = 0L,
  verbose2 = 0L
)
}
\arguments{
\item{W}{A numeric Matrix of size nx3, supplied as the initial value for the problem. One does not have to supply it for LS. Othwerwise, if NULL, a basic estimate of W is used.}

\item{method}{The method to be used, possible options are.}

\item{dimen}{The dimension of the train MR signals (possibly read from the nifti file, the format would be: )}

\item{TE_train}{A numeric vector, TE values for the training set}

\item{TR_train}{A numeric vector, TR values for the training set}

\item{sigma_train}{A numeric vector, sigma_j values for the training set}

\item{train_scale}{A positive real number by which voxels are scaled}

\item{TE_scale}{A positive real number by which TE values are scaled}

\item{TR_scale}{A positive real number by which TR values are scaled}

\item{black_list}{A numeric vector of size n signifying the background voxels}

\item{maxiter_LS}{The maximum iteration number for the L-BFGS-B procedure for LS}

\item{maxiter}{The maximum iteration number for the EM algorithms for MLE/OSL/AECM}

\item{abs_diff}{Absolute difference criteria to stop the EM algorithm}

\item{rel_diff}{Relative difference criteria to stop the EM algorithm}

\item{verbose}{verbose outputs}

\item{verbose2}{More verbose outputs}
}
\value{
The final estimate of \code{W} after executing the method.
}
\description{
Synthetic Magnetic Resonance (symR)
}
\examples{
add(1, 1)
add(10, 1)
## Basic 2D example: 
### Load an nifti file (using oro.nifti or Rnifti or similar package) and resizing into size nxm:
file_name <- system.file("extdata", "new_phantom.nii.gz", package = "symR", mustWork = TRUE)
phantom <- RNifti::readNifti(file_name, internal=TRUE)
phantom <- apply(phantom, 4, function(x){c(x)})
phantom[phantom==0.0] <- 0.5  ## Pre-processing to remove the -Inf issue in likelihood. 
n <- nrow(phantom)

## Other input parameters: 
TE_values <- c(0.03, 0.06, 0.04, 0.08, 0.05, 0.10, 0.03, 0.06, 0.04, 
   0.08, 0.05, 0.10, 0.03, 0.06, 0.04, 0.08, 0.05, 0.10)
TR_values <- c(1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3)
sigma_values <- c(19.6926, 19.5212, 20.4545, 14.9832, 18.9208, 13.5797, 
  21.9965, 21.4306, 25.0911, 21.1322, 22.1558, 18.9088, 
  27.0099, 23.961, 25.0904, 22.2281, 26.9848, 22.1567)
TE_scale = 2.01/min(TE_values); TR_scale = 2.01/min(TR_values); r_scale = 10.0
TE_values = TE_values*TE_scale; TR_values = TR_values*TR_scale;
phantom = phantom/r_scale; sigma_values <- sigma_values/r_scale

## Make a mask or supply the mask: 
mask <- array(1, dim=n)
for (i in 1:n) {
   mask[i] <- ifelse(any(phantom[i,]>50), 0, 1)
}

## Divide into train and test with 3 train images: 
train_ind <- c(1, 7, 14)
test_ind <- setdiff(1:ncol(phantom), train_ind)
train <- phantom[,train_ind]; sigma_train <- sigma_values[train_ind]
TE_train <- TE_values[train_ind]; TR_train <- TR_values[train_ind]
test <- phantom[,test_ind]; sigma_test <- sigma_values[test_ind]
TE_test <- TE_values[test_ind]; TR_test <- TR_values[test_ind]

dimen <- c(3, 256, 256, 1)		## First element correspond to dim+1


## Get LS estimate: 

# Overall performaces of LS
#mean(Performance_test_R(W_init, test, TE_test, TR_test, sigma_test, mask, 1, 1, 1))
}
